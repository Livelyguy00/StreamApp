{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projekty\\\\Frontend\\\\kursReact\\\\Streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions/index';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      touched,\n      error\n    }) => {\n      if (touched && error) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form__error\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 9\n          }\n        }, error);\n      }\n    };\n\n    this.renderInput = ({\n      input,\n      meta\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"form__label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      }, input.name), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n        type: \"text\",\n        className: \"form__input\"\n      }, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form__message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }\n      }, this.renderError(meta)));\n    };\n  }\n\n  onSubmit(formValues) {\n    this.props.createStream(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn--primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must name your stream';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must add a description to your stream';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["D:/Projekty/Frontend/kursReact/Streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderError","touched","error","renderInput","input","meta","name","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,qBAA7B;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACzCC,WADyC,GAC3B,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,KAAwB;AACpC,UAAGD,OAAO,IAAIC,KAAd,EAAoB;AAClB,4BACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACIA,KADJ,CADF;AAKD;AACF,KATwC;;AAAA,SAWzCC,WAXyC,GAW3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,KAAqB;AACjC,0BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCD,KAAK,CAACE,IAAtC,CADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,SAAS,EAAC;AAFZ,SAGMF,KAHN;AAIE,QAAA,YAAY,EAAC,KAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,eAQE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKJ,WAAL,CAAiBK,IAAjB,CADH,CARF,CADF;AAcD,KA1BwC;AAAA;;AA4BzCE,EAAAA,QAAQ,CAACC,UAAD,EAAY;AAClB,SAAKC,KAAL,CAAWZ,YAAX,CAAwBW,UAAxB;AACD;;AAEDE,EAAAA,MAAM,GAAE;AACN,wBACE;AAAM,MAAA,QAAQ,EAAG,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAAjB;AAA0D,MAAA,SAAS,EAAC,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAG,KAAKJ,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAG,KAAKA,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAQ,MAAA,SAAS,EAAC,kBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADF;AAOD;;AAxCwC;;AA2C3C,MAAMS,QAAQ,GAAIJ,UAAD,IAAgB;AAC/B,QAAMK,MAAM,GAAG,EAAf;;AACA,MAAG,CAACL,UAAU,CAACM,KAAf,EAAqB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,2BAAf;AACD;;AACD,MAAG,CAACN,UAAU,CAACO,WAAf,EAA2B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,2CAArB;AACD;;AAED,SAAOF,MAAP;AACD,CAVD;;AAYA,MAAMG,WAAW,GAAGrB,SAAS,CAAC;AAC5BsB,EAAAA,IAAI,EAAE,cADsB;AAE5BL,EAAAA;AAF4B,CAAD,CAAT,CAGjBd,YAHiB,CAApB;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAO;AAC3BC,EAAAA;AAD2B,CAAP,CAAP,CAEVmB,WAFU,CAAf","sourcesContent":["import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport { createStream } from '../../actions/index';\r\n\r\nclass StreamCreate extends React.Component {\r\n  renderError = ({ touched, error }) => {\r\n    if(touched && error){\r\n      return(\r\n        <div className='form__error'>\r\n          { error }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderInput = ({ input, meta }) => {\r\n    return (\r\n      <div className='form__group'>\r\n        <label className='form__label'>{input.name}</label>\r\n        <input \r\n          type='text' \r\n          className='form__input' \r\n          {...input}\r\n          autoComplete='off'\r\n        />\r\n        <div className='form__message'>\r\n          {this.renderError(meta)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSubmit(formValues){\r\n    this.props.createStream(formValues);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <form onSubmit={ this.props.handleSubmit(this.onSubmit) } className='form'>\r\n        <Field name='title' component={ this.renderInput }/>\r\n        <Field name='description' component={ this.renderInput }/>\r\n        <button className='btn btn--primary'>Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n  const errors = {}\r\n  if(!formValues.title){\r\n    errors.title = 'You must name your stream';\r\n  }\r\n  if(!formValues.description){\r\n    errors.description = 'You must add a description to your stream'\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nconst formWrapped = reduxForm({\r\n  form: 'streamCreate',\r\n  validate\r\n})(StreamCreate);\r\n\r\nexport default connect(null, { \r\n  createStream\r\n } )(formWrapped);"]},"metadata":{},"sourceType":"module"}